{% extends "layout.html" %}
{% block head %}
    <style>
        .{{id}}TaskActionBarContainer{
            padding-top:20px; 
            padding-bottom: 20px;
             
        }
        .{{id}}TaskActionBar{
            background: none repeat scroll 0 0 #d7dbda; 
            border: 1px solid #bababa; 
            margin-left: -25px; 
            margin-right: -25px;
            padding: 10px 0;
        }       
        #{{id}}TaskActionBar .btn-default:active, .btn-default.active {
            border-color: #999;
        }
        #{{id}}TaskActionBar .navigationButton {
            margin: 0 1px;
        }
        #{{id}}TaskActionBar .navigationButton.last {
            margin-right: 0;
        }
        .{{id}}form-group {
            margin-bottom: 0px;
        }
        .{{id}}-header-left{
            color: #5f6866;
            margin-top: 4px;
            padding-left:25px;
        }
        .{{id}}-header-left a{
            color: #5f6866;
        }
        .{{id}}-header-left .fc-header-title{
            vertical-align: middle;
        }
        #{{id}}TaskActionBar .navBtnGroup {
            border: solid 2px #ccc; /*#5f6866;*/
            border-radius: 4px; 
            background-color: #ccc;       
        }
        #{{id}}TaskActionBar .navBtn{
            margin-right: 2px;
        }
    </style>
{% endblock %}

{% block customActionBar %}
<div ng-controller="{{id}}TaskCustomActionCtrl" class="{{id}}TaskActionBarContainer" id="{{id}}TaskActionBar" ng-init="init('week')">
<!-- START CTRL -->
        <div class="row {{id}}TaskActionBar">
          <div class="col-sm-4" style="float: left; ">
            <div class="{{id}}-header-left">
                
            </div>
          </div>
          <div class="col-sm-4" style="float: left;">
            <div style="padding: 4px;">{{widget_at(0, tags='actionbutton')}}</div>
            
          </div>
          <div class="col-sm-4" style="float: left; ">
            <span class="">{{widget_at(0, tags="select")}}</span>
          </div>
        </div>
    </div>
 <!-- END CTRL -->
<div class="clearfix"></div>
 {% endblock%} 
 
{% block page %}

<div ng-controller="{{id}}TasksCtrl as TaskCtrl" ng-init="init()">
  <div class="clearfix"></div>
    <div class="row">
      
      <div class="col-lg-8" style="margin-left: 20px;">Task For:
       <div class="dropdown">
           <strong>{% raw %} {{matter.name}} {% endraw %}<a class="dropdown-toggle">Change Matter</a></strong>
           <ul class="dropdown-menu" style="padding: 0; ">
             <li>{{widget_at(0, tags='matterSearch')}}</li>
           </ul>
        </div>
         <div style="display:online-block; position: relative; width:300px; margin-left:150px;  margin-top:-45px;">{{widget_at(0, tags='myEventsCheck')}}</div>
      </div>
      <div class="pull-right" style="margin-right:25px">
       {{widget_at(0, tags="action")}}
    </div>
    </div>
  <div class="row">
    <div class="tasks page-todo">
      <div class="task-list">
        <span ng-if="predicate=='dueDate'">
          <div ng-repeat="team in players | orderBy:sort: reverse| groupBy:predicate track by $index">
              {{widget_at(0, tags="group",title="team",sorting="predicate",count="$index")}}
          </div>
        </span>
        <span ng-if="predicate=='status'">
          <div ng-repeat="team in players | orderBy:sort: reverse| groupBy:predicate">
              {{widget_at(0, tags="group1",title='{{team}}',sorting="predicate")}}
          </div>
        </span>
         <span ng-if="predicate=='owner'">
         
        </span>  
      </div>
      </div>
       <div class="clearfix"></div>
   </div>
</div>
{% endblock %}
{% block script %}
var uniqueItems = function (data, key) {
                var result = [];
                for (var i = 0; i < data.length; i++) {
                  var value = data[i][key];
                if (result.indexOf(value) == -1) {
                  result.push(value);
                }
            }
              return result;
          }
          
          
angular.module('{{id}}app', [])
.filter('groupBy',function () {
      return function (collection, key) {
          if (collection === null) return;
          return uniqueItems(collection, key);
        };
    })
    

.value('{{dataset[0].name}}dataUrl', '{{dataset[0]._url}}/:recordId')

.factory('{{dataset[0].name}}Records', function($resource, {{dataset[0].name}}dataUrl) {
return $resource({{dataset[0].name}}dataUrl);
})

.factory('{{id}}RecordsByMatterId', function($resource,  {{dataset[0].name}}dataUrl) {
   return $resource('{{dataset[0]._url}}/_query', {}, {query: {method: 'POST', params: {}, isArray: true}});
})
.factory('{{id}}TaskForMatter', function($resource) {
    return $resource('{{dataset[0]._url}}/:recordId', {}, {query: {method: 'GET', params: {}, isArray: true}});
})
.service('{{id}}TasksForMatterDates', function({{id}}TaskForMatter) {
  this.changeQuery = function(event,typeQuery){
    switch(typeQuery){
      case 'week':
    /* get task for  this week according ISO_8601*/
          var today = new Date();
          var first = today.getDate() - today.getDay()+1;
          var last = first + 6; 
          var startD = new Date(today.setDate(first));
          var endD = new Date(today.setDate(last));
          startD = moment(startD).format("YYYY-MM-DD")+"T00:00:00";
          endD = moment(endD).format("YYYY-MM-DD")+"T23:59:59";
          var objectTask= [];
          objectTask.push(startD);
          objectTask.push(endD);
          objectTask.push({{id}}TaskForMatter.query({query:JSON.stringify({$gte: {startDate: startD}, $lte: {startDate: endD}})}));

          return objectTask;
                
       break;
      case 'today':
      /* get task for today */
          var startD=new Date();
          var endD= new Date(startD.getTime());
          startD = moment(startD).format("YYYY-MM-DD")+"T00:00:00";
          endD = moment(endD).format("YYYY-MM-DD")+"T23:59:59";
          var objectTask= [];
          objectTask.push(startD);
          objectTask.push({{id}}TaskForMatter.query({query:JSON.stringify({$gte: {startDate: startD}, $lte: {startDate: endD}})}));
          return objectTask;

      break;

      case  'All':
          var objectTask= [];
          objectTask.push({{id}}TaskForMatter.query({}));
          return objectTask ;

    break;
    } /*EN SWITCH*/
   };
})

.controller('{{id}}TasksCtrl', ['$scope','$rootScope', '{{dataset[0].name}}Records','{{id}}RecordsByMatterId', TasksController])
.controller('{{id}}TaskCustomActionCtrl', function ($scope,{{id}}TasksForMatterDates, $rootScope, $modal, $log) {
   /* START CONTROLLER */

   $scope.init=function(typeQuery){
       console.log("Initialize controller TaskCustomActionCtrl = "+typeQuery);
       $scope.changeQuery('',typeQuery);
   };
   
   $scope.changeQuery = function(event,typeQuery){
      var answerData ={{id}}TasksForMatterDates.changeQuery(event,typeQuery);
       
         switch(typeQuery){
             case 'today':
                $scope.todayDate=answerData[0];
                var answerPromise=answerData[1];
                answerPromise.$promise.then(function(data){
                    $scope.dataTask=data;
                    console.log("------------- data of tasks ----------");
                    console.log($scope.dataTask);
                });
                   
                            
             break;
             case 'week':

             $scope.startDSelect=answerData[0];
               $scope.endDSelect=answerData[1];
               var answerPromise=answerData[2];
                answerPromise.$promise.then(function(data){
                    $scope.dataTask=data;
                    console.log("------------- data of tasks ----------");
                    console.log($scope.dataTask);
                });
              
             break;

             case 'All':

             var answerPromise=answerData[0];
                answerPromise.$promise.then(function(data){
                    $scope.dataTask=data;
                    console.log("------------- data of tasks ----------");
                    console.log($scope.dataTask);
                });


             break;
          }

      
       $rootScope.$broadcast('changeRangeOfDates',$scope.dataTask);
              
      


    };
  
   

   /* END CONTROLLER */
 });

function TasksController($scope,$rootScope,{{dataset[0].name}}Records,{{id}}RecordsByMatterId) {
    
    $scope.init= function(){
        /* $scope.players=$rootScope.sharedData.dataTask;*/
        $scope.players = {{dataset[0].name}}Records.query();
    };

     $scope.$on('changeRangeOfDates',function(event, data){
        $scope.players=data;
      });


    
      console.log($scope.players);
      $scope.myEventsChecked = false;
    
    
  
  var initialMatter = {
        "_id": "543be337-1860-4a66-93c0-07e733450eb2",
        "_table": ":com_bridge_way_matters/matter",
        "_uuid": "543be337-1860-4a66-93c0-07e733450eb2",
        "matterName": "Andy's matter",
        "matterNumber": "HDKSADH",
        "matterNumber_id": 17592186046849
    };

    $scope.matter = {};
    function resetMatter(){
        $scope.matter = {};
        $scope.matter.name = "All Matters";
        $scope.matter._id = "";
    }
     resetMatter();

    function setMatter(matter){
        $scope.matter.name = matter.matterName;
        $scope.matter._id = matter.matterNumber_id;
    } 
   $scope.predicate='dueDate';
   
   String.prototype.trim = function(){ return this.replace(/^\s+|\s+$/g,'') }
   $scope.sort = function(item) {
        if ($scope.predicate == 'duedate') {
            return new Date(item.duedate);
        }
        if ($scope.predicate == 'status') {
            return item.status;
        }
        if ($scope.predicate == 'owner') {
            return item.taskOwnerUUID;
        }
        return item[ $scope.predicate];
    };

    $scope.sortBy= function(field) {
        if ($scope.predicate != field) {
            $scope.predicate = field;
            $scope.reverse = false;
        } else {
            $scope.reverse = !$scope.reverse;
        }
    };
    
    /* new Task */
    $scope.newTaskClick = function() {
        document.location.href='/com_bridge_way_calendar_link/newtask#/';      
    };
 
    $( "select" ).change(function () {
    var str = "";
    $( "select option:selected" ).each(function() {
      str += $( this ).text() + " ";  
      if(str.trim()=="Due Date")
       {
        
        $scope.$apply(function()
        {
        $scope.predicate='dueDate';
        })
       }
       if(str.trim()=="Status")
       {
        $scope.$apply(function()
        {
        $scope.predicate='status';
        })
       }
       if(str.trim()=="Owner")
       {
        $scope.$apply(function()
        {
        $scope.predicate='owner';
        })
       }
     });
   })
  
    $scope.reverse= false;            
  } 
  /*
   * Display the New Task page.
   */
  TasksController.prototype.displayNewTaskPage = function() {
      this.rootScope.gotoPage('4686bdde-226e-11e4-b1e5-5c514f937802');
  };

addApp('{{id}}app');
{% endblock %}